			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

John Li <jzli@caltech.edu>
Justin Leong <jleong@caltech.edu>
Christina Lin <cylin@caltech.edu>

>> Specify how many late tokens you are using on this assignment:  
0

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL:  
   commit ...

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.
    Most, if not all, of our functions we wrote also have test cases.
  We included our own test suites along with the test suites you guys
  created. This is to just ensure that our functions are working and that we
  have a solid foundation. A lot of our code is also wrapped in structs 
  because there is no way to find the length of a dynamic array.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

  Ending string with \0:
    http://stackoverflow.com/questions/2911089/null-terminating-a-string

  Memory leak with strcpy:
    http://stackoverflow.com/questions/12426837/memory-error-using-valgrind-strcpy

  Variable declaration forbidden after labels:
    http://stackoverflow.com/questions/18496282/why-do-i-get-a-label-can-only-be-part-of-a-statement-and-a-declaration-is-not-a

  Use of gotos:
    http://stackoverflow.com/questions/27451220/how-can-i-correctly-handle-malloc-failure-in-c-especially-when-there-is-more-th

  git merge --no-ff:
    http://stackoverflow.com/questions/9069061/what-is-the-difference-between-git-merge-and-git-merge-no-ff

  Naming Convention:
    http://stackoverflow.com/questions/1722112/what-are-the-most-common-naming-conventions-in-c

  Tests convention:
    https://www.quora.com/What-is-the-best-way-to-organize-tests-in-a-C-project

  #include protocol:
    http://stackoverflow.com/questions/2762568/c-c-include-file-order-best-practices

  git commit protocol:
    http://chris.beams.io/posts/git-commit/

  git flow protocol:
    http://danielkummer.github.io/git-flow-cheatsheet/

			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

   John Li: Approximately 15-16 hours.
   Justin Leong:
   Christina Lin:

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

   John Li: Developing structs for TokenGroups and CommandLinkedLists (Linked List
   for Command struct). Parsing the output from tokenizer into CommandLinkedList.

   Justin Leong:

   Christina Lin:

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

1. With the input "a arg1 arg2 | b arg1 | c arg1 arg2 arg3", the shell
first fgets the input.

2. From here, we parse this line into three variables:
  1) char* array
  2) token_type array
  3) size of both arrays
token_type is an enumerator that characterizes the different types of 
strings in the argument. Index X of the token_type array labels the Xth
string in the char* array.

Ex: Input: "a arg1 arg2 | b arg1 | c arg1 arg2 arg3"

    Output:
      1) char* array: ["a", "arg1", "arg2", "|", "b", "arg1", "|", "c", "arg1",
                       "arg2", "arg3"]

      2) token_type array: [WORD, WORD, WORD, PIPE, WORD, WORD, PIPE, WORD, WORD,
                            WORD, WORD]

      3) size: 11

3. Using these three arrays, we group and split the arrays delimited by "|", since
   pipes separate one command from another. All three things are passed into the
   function split_string_by_pipe to produce a linked list of TokenGroups

Ex: 

  Input:
    1) char* array: ["a", "arg1", "arg2", "|", "b", "arg1", "|", "c", "arg1",
                     "arg2", "arg3"]

    2) token_type array: [WORD, WORD, WORD, PIPE, WORD, WORD, PIPE, WORD, WORD,
                          WORD, WORD]

    3) size: 11

  Output:
    TokenGroupLList:
      Node 1: 
        char **words: ["a", "arg1", "arg2"]
        token_type *tokens: [WORD, WORD, WORD],
        int num_tokens: 3
        prev_group: NULL
        next_group: Node 2

      Node 2:
        char **words: ["b", "arg1"]
        token_type *tokens: [WORD, WORD],
        int num_tokens: 2
        prev_group: Node 1
        next_group: Node 3

      Node 3:
        char **words: ["c", "arg1", "arg2", "arg3"]
        token_type *tokens: [WORD, WORD, WORD, WORD],
        int num_tokens: 4
        prev_group: Node 2
        next_group: NULL

4. Now that the tokenized input string has been grouped by commands, we parse each
   TokenGroup node into a Command node; ultimately producing a Command Linked List.
   This is done by iterating through each node in the TokenGroupLList, and creating a
   Command struct out of it, and appending that to the CommandStructLinkedList. The
   Command struct will have Redirection information (not in this example) and it will
   terminate each argument array with NULL.

  Input:
    TokenGroupLList:
      Node 1: 
        char **words: ["a", "arg1", "arg2"]
        token_type *tokens: [WORD, WORD, WORD],
        int num_tokens: 3
        prev_group: NULL
        next_group: Node 2

      Node 2:
        char **words: ["b", "arg1"]
        token_type *tokens: [WORD, WORD],
        int num_tokens: 2
        prev_group: Node 1
        next_group: Node 3

      Node 3:
        char **words: ["c", "arg1", "arg2", "arg3"]
        token_type *tokens: [WORD, WORD, WORD, WORD],
        int num_tokens: 4
        prev_group: Node 2
        next_group: NULL

  Output:
    CommandLinkedList:
      Node 1: 
        char **args: ["a", "arg1", "arg2", NULL]
        int num_tokens: 3
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: NULL
        next_command: Node 2

      Node 2:
        char **args: ["b", "arg1", NULL]
        int num_tokens: 2
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: Node 1
        next_command: Node 3

      Node 3:
        char **args: ["c", "arg1", "arg2", "arg3", NULL]
        int num_tokens: 4
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: Node 2
        next_command: NULL

5. /TODO/

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

The process is very similar to above. However, redirects are also accounted
for in the Command struct. The redirections are parsed in the Command constructor
which calls filter_command_line_args. Here is an example of the Token to Command
transformation with this input.

  Input:
    TokenGroupLList:
      Node 1: 
        char **words: ["a", "arg1", "arg2", "<", "inp.txt"]
        token_type *tokens: [WORD, WORD, WORD, IN_REDIR, WORD],
        int num_tokens: 5
        prev_group: NULL
        next_group: Node 2

      Node 2:
        char **words: ["b", "arg1"]
        token_type *tokens: [WORD, WORD],
        int num_tokens: 2
        prev_group: Node 1
        next_group: Node 3

      Node 3:
        char **words: ["c", "arg1", "arg2", "arg3", ">", "out.txt"]
        token_type *tokens: [WORD, WORD, WORD, WORD, OUT_REDIR, WORD],
        int num_tokens: 6
        prev_group: Node 2
        next_group: NULL

  Output:
    CommandLinkedList:
      Node 1: 
        char **args: ["a", "arg1", "arg2", NULL]
        int num_tokens: 3
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: NULL
        next_command: Node 2

      Node 2:
        char **args: ["b", "arg1", NULL]
        int num_tokens: 2
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: Node 1
        next_command: Node 3

      Node 3:
        char **args: ["c", "arg1", "arg2", "arg3", NULL]
        int num_tokens: 4
        Redirection *stdin_redirect: NULL
        Redirection *stdout_redirect: NULL
        Redirection *stderr_redirect: NULL
        prev_command: Node 2
        next_command: NULL

  After this CommandLinkedList construction and while they're executed, the redirections are handled
  by /TODO/

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.
  
  First, we remove the redirection paths from the argument list. This
  is done inside the Command constructor, particularly in
  filter_command_line_args. This way, the command line arguments will
  instead be the array ["a", NULL]. The struct will store two Redirection
  pointers (one for stdin and one for stdout), each one storing their
  respective redirection paths.

  

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?

>> A9: Did you take any steps to facilitate development of the command
>> shell in parallel, e.g. designing shared data structures or integration
>> points up front?  How well did your approach work for your team?  Feel
>> free to share any positive or negative experiences in this vein.


			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

