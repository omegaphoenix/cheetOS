                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Justin Leong <jleong@caltech.edu>
John Li <jzli@caltech.edu>
Christina Lin <cylin@caltech.edu>

>> Specify how many late tokens you are using on this assignment: 4

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/omegaphoenix/cheetOS
   commit: 
   tag: project4-3

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

All tests pass on qemu.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

incrementing pointers:
http://stackoverflow.com/questions/16578054/how-to-make-a-pointer-increment-by-1-byte-not-1-unit

aligning pointers:
http://stackoverflow.com/questions/4840410/how-to-align-a-pointer-in-c

strtok_r:
https://linux.die.net/man/3/strtok_r

reentrant functions:
http://stackoverflow.com/questions/2799023/what-exactly-is-a-reentrant-function

Linux kernel versions 2.6.39 and 4.9


			   USER PROGRAMS
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

  Justin Leong: At least 51:22:55 (hh/mm/ss)
  John Li: Approximately 8 hours. Was busy planning and executing several events this week.
  Christina Lin: Approximately 26-27 hours.

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

  Justin Leong: Implement/debug system calls and process_wait.
  John Li: Debugging.
  Christina Lin: User memory access. Argument passing.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

static int max_args;

This is set as the greatest argc seen and is used to initialize argv[] without
having to pass argc as an argument.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

Arguments are parsed in start_process() using strtok_r(). The arguments are
stored in an array, char *argv[], and the total number of arguments is stored
in argc. After the stack is set up, argv and argc are passed to setup_args along
with the stack pointer. We then iterate through argv two times: the first time,
we place the arguments on the stack and store pointers to their address in
an array, ptr. The second time, we push the addresses onto the stack.

To avoid overflowing the stack page, we check the size of the
arguments. We could allocate a new page if the arguments overflow but we have
not implemented that.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

It is the reentrant version which means that it can be safely called again
before the previous call is completed which makes it thread safe.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

One advantage of keeping the executable name separate is easier loading and
naming of threads. Loading requires the executable name as an argument, and
the new thread is named after the executable. Currently, we need to make a copy
of the command line arguments and tokenize the line for each of these
operations. With separated executable and arguments, we could avoid all of the
extra copies. It is easier to set up pipe and redirect as well from the shell.

Another advantage is security since the shell can handle bad commands and we
can have two levels of validation.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

We added this variable to process.c to synchronize filesystem calls.
    struct lock filesys_lock;          /*! Lock that belongs to process. */

We added this struct to thread.h for the list of open files.
    /* Open file. This is for a linked list of open files in each thread. */
    struct sys_file {
        struct file *file;
        int fd;
        struct list_elem file_elem;
    };

In our thread struct, we included these attributes and their following descriptions:

    /*! Shared between thread.c and userprog/syscall.c. */
    /**@{*/
    int num_files;                      /*!< Number of open files (counting closed ones). */
    struct list open_files;             /*!< Open files. */
    /**@}*/

    /*! Shared between userprog/process.c and thread.c. */
    /**@{*/
    int exit_status;                    /*!< Exit status to be retrieved by parent. */
    struct list kids;                   /*!< List of children processes. */
    struct list_elem kid_elem;          /*!< List element for parent's kids list. */
    struct semaphore wait_sema;         /*!< Sempahore for process_wait. */
    struct semaphore done_sema;         /*!< Sempahore for process_exit. */
    bool waited_on;                     /*!< True if process_wait has been called. */
    struct lock wait_lock;              /*!< Lock for checking waited_on. */
    /**@}*/

    /*! Shared between by userprog/process.c and userprog.syscall.c and
        thread.c. */
    /**@{*/
    struct thread *parent;              /*!< Thread that created this one. */
    struct semaphore exec_load;         /*!< Semaphore for checking when executable has loaded. */
    bool loaded;                        /*!< Check if exec loaded successfully. */
    struct file *executable;            /*!< Executable to keep open until done. */
    /**@}*/


>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are only unique within a single thread. The thread contains
a list of open files using sys_file. Every time a new file is opened num_files
is incremented and then the new file gets a fd of num_files + 2 before it is
incremented since 0 and 1 are reserved for stdin and stdout file descriptors.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

We use valid_read_addr to check the pointer to the buffer and the buffer. If
we are reading/writing from/to a file, we get the file from the thread and
make the filesys call. If we are reading/writing from/to the terminal, we
read one byte at a time and we output 300 bytes at a time.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

We make inspections of the page table using valid_read_addr where the
page table is inspected once. Copying would call the inspection
to the page table twice regardless of size if the data is on one page
and four times if the data is on two pages depending on which function
is called (because some functions have to check twice - once after
dereferencing since it is a pointer to the begining address of the
page).

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

sys_wait() calls process_wait which waits for a child to signal that it is
ready to die by setting it's status or up'ing it's wait semaphore and then
the child process's page is freed. So this finished the process termination
in certain cases.  See B8 for more detail.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

To avoid obscuring code, we we check errors with the functions valid_read_addr()
and valid_write_addr(). This minimizes the amount of if-else statements within
functions.

When an error is detected, we free allocated resources by calling sys_exit()
which calls thread_exit() which iterates through all of its open files and
locks and frees them. thread_exit() then calls process_exit() and the
executable is freed here. If we know no files have been allocated we can call
thread_exit() directly.

Example: If an argument is not a valid read address, we call sys_exit(-1)
which sets the exit status to -1 and then calls thread_exit(). thread_exit()
frees all open files, acquired locks, the executable, and tells the lock
that it is waiting on that it is no longer waiting.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

We add a wait_sema semaphore which is blocked initially and so sys_exec() waits
on this sempahore before returning. The semaphore is up'ed when the
executable has completed loading and the thread has a boolean "loaded"
which is true if successful. Once sys_exec() resumes, it can check
the boolean and then return. The thread isn't killed until after it's
parent is set to null. This requires us to have 3 locations where we can
possibly free the thread.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When P calls wait(C) before C exits, C is not finished yet so it has not
up'ed C->wait_sema. So P is blocked on C->wait_sema. When C calls
process_exit() when it is done, it up's C->wait_sema and tries to down
C->done_sema which is set to 0 when C is created. Then P retrieves
C->exit_status and up's C->done_sema which tells C that it can now free
it's memory.

After C exits, if it hasn't been freed by a previous wait call, it waits
on C->done_sema which is 0 and thus blocking. When P makes the wait call,
P just gets the exit status and frees the kid by up'ing C->done_sema.
If wait has already been called on C, P returns -1;

When P terminates without waiting, it tells each one of it's kids that they
don't have a parent anymore by setting their struct thread *parent to NULL
and up'ing their C->done_sema. Then when C calls process_exit(), it will down
the C->done_sema semaphore and since it was 1, it will be able to continue
and free it's page.

The special case is the initial thread where we need to initialize the
done_sema to 1 so that when it exits, it is not waiting on a parent to
up it's done_sema.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

When accessing user memory, we first check that the address is below PHYS_BASE
and then attempt to read/write. In case of a page fault, instead of exiting,
we set eax to -1. This byte is read and the address is deemed invalid.

This method is fast because it takes advantage of the processor's MMU. Also, it
distinguishes between read and write for clarity.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Disadvantages of current design:
The first design we used is to use an array of pointers to files. The advantage
of this approach is that it is quick and easy to access open_files from the array
since fd maps directly to an index (by subtracting 2 for stdin and stout).
The disadvantage is that this always takes the same number of bytes to store
the array which can lead to corruption of the thread memory with too many
processes. Using a linked list would reduce the space requirement on the
thread struct but would increase the access time and complexity of getting the
file associated with a file descriptor.

Advantages of current design:
We reimplemented to use a linked list instead which solved some of our memory
management issues and allowed us to handle as many files as necessary. We
created a struct to make this implementation easier which kept track of the
file descriptor, file, and has a list_elem to put it in the linked list of
open files.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We didn't change it.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

The suggested order of implementation was misleading for this assignment. In
section 5.2, it says "After the above are implemented, user processes should
work minimally. At the very least, they can write to the console and exit
correctly." But this is false -- the suggested temporary fixes for argument
passing and process_wait() were not adequate for tests to pass.

Instead, the order of implementation, based on our experience, should be:
- user memory access
- complete argument passing
- syscall_handler
- syscall_write
- syscall_exit
- complete process_wait
- the rest of the syscalls

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

